[comment encoding = UTF-8 /]
[module CreateFileNewWizard('http://www.eclipse.org/emf/2002/Ecore','http://mondo.org/runtimePatterns','http://www.eclipse.org/emf/2002/GenModel')]
[import org::mondo::generate::modular::project::main::requests::global_queriesModularProject /]

[template public CreateFileNewWizard(anProjectName : String, anPackageName : String, anPatternInstance : PatternInstance, anEObjectGenModel : GenModel)]

[for (c : ClassRoleInstance | anPatternInstance.Get_FileClassRoleInstance() )]

[file ('src/'.concat(anProjectName.toLower() + '.' + anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase() + getProperty('prefix_name')).replaceAll('\\.','/').concat('/wizard/file/').concat(c.element.name.toString()).concat('CreateFileWizard.java'),false, 'UTF-8')]
package [anProjectName.toLower()/].[anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase()/][getProperty('prefix_name')/].wizard.file;

import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.core.runtime.*;
import org.eclipse.jface.operation.*;
import java.lang.reflect.InvocationTargetException;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.core.resources.*;
import org.eclipse.core.runtime.CoreException;

import java.io.*;
import [anProjectName.toLower()/].[anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase()/][getProperty('prefix_name')/].XMI_File;

import org.eclipse.ui.*;
import org.eclipse.ui.ide.IDE;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.common.util.URI;
import org.mondo.modular.sirius.ext.EvaluateSiriusProjectCreation;

[let genPackage : GenPackage =  getGenClassFromEClass(c.element,anEObjectGenModel).eContainer().oclAsType(GenPackage) ]
[if (genPackage.basePackage->isEmpty() = true)]
import [generateEClassImport(c.element)/];
[else]
import [genPackage.basePackage/].[generateEClassImportBasePackage(c.element)/];
[/if]
[comment EEnum Classes/]
[for (attr : EAttribute | c.element.eAllAttributes)]
[if (attr.derived = false and attr.eType.eClass().name = 'EEnum')]
[if (genPackage.basePackage->isEmpty() = false)]
import [genPackage.basePackage/].[generateEClassImport(attr.eType)/];
[else]
import [generateEClassImport(attr.eType)/];
[/if]
[/if]
[/for]
[comment FactoryImpl/]
[if (anEObjectGenModel.genPackages.classPackageSuffix->isEmpty() = true) and
	genPackage.basePackage->isEmpty() = false]
import [genPackage.basePackage/].[generateEClassImportFactoryImpl(c.element)/];
[elseif (anEObjectGenModel.genPackages.classPackageSuffix->isEmpty() = false) and 
	genPackage.basePackage->isEmpty() = false ]
import [genPackage.basePackage/].[c.element.eContainer().oclAsType(EPackage).name/].impl.[genPackage.prefix.concat('FactoryImpl')/];
[elseif (anEObjectGenModel.genPackages.classPackageSuffix->isEmpty() = true) and 
	genPackage.basePackage->isEmpty() = true ]
import [generateEClassImportFactoryImpl(c.element)/];
[elseif (anEObjectGenModel.genPackages.classPackageSuffix->isEmpty() = false) and 
	genPackage.basePackage->isEmpty() = true ]
import [getRootPackageString(c.element)/].[anEObjectGenModel.genPackages->first().classPackageSuffix/].[genPackage.prefix.concat('FactoryImpl')/];
[/if]


public class [c.element.name/]CreateFileWizard extends Wizard implements INewWizard {
	private [c.element.name/]CreateFileWizardPage page;
	private ISelection selection;

	/**
	 * Constructor for [c.element.name/]CreateFileWizard.
	 */
	public [c.element.name/]CreateFileWizard() {
		super();
		setNeedsProgressMonitor(true);
	}
	
	/**
	 * Adding the page to the wizard.
	 */

	public void addPages() {
		page = new [c.element.name/]CreateFileWizardPage(selection);
		addPage(page);
	}

	/**
	 * This method is called when 'Finish' button is pressed in
	 * the wizard. We will create an operation and run it
	 * using wizard as execution context.
	 */
	public boolean performFinish() {
		final String containerName = page.getContainerName();
		final String fileName = page.getFileName();
		[for (attr : EAttribute | c.element.eAllAttributes)]
		[if(c.Get_ClassRoleInstance_TypeFeature_EAttribute('name').name<>attr.name)]
		final String attr_[attr.name /] = page.Get_[attr.name /]();	
		[/if]
		[/for]
		
		IRunnableWithProgress op = new IRunnableWithProgress() {
			public void run(IProgressMonitor monitor) throws InvocationTargetException {
				try {
					doFinish(containerName, fileName,
					[for (attr : EAttribute | c.element.eAllAttributes)]
						[if(c.Get_ClassRoleInstance_TypeFeature_EAttribute('name').name<>attr.name)]
					attr_[attr.name /],
					[/if]
					[/for]
					 monitor);
				} catch (CoreException e) {
					throw new InvocationTargetException(e);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally {
					monitor.done();
				}
			}
		};
		try {
			getContainer().run(true, false, op);
		} catch (InterruptedException e) {
			return false;
		} catch (InvocationTargetException e) {
			Throwable realException = e.getTargetException();
			MessageDialog.openError(getShell(), "Error", realException.getMessage());
			return false;
		}
		return true;
	}
	
	/**
	 * The worker method. It will find the container, create the
	 * file if missing or just replace its contents, and open
	 * the editor on the newly created file.
	 *@throws IOException
	 */

	private void doFinish(
		String containerName,
		String fileName,
		[for (attr : EAttribute | c.element.eAllAttributes)]
		[if(c.Get_ClassRoleInstance_TypeFeature_EAttribute('name').name<>attr.name)]
		String attr_[attr.name /],	
		[/if]
		[/for]
		IProgressMonitor monitor)
		throws CoreException, IOException  {
		// create a sample file
		monitor.beginTask("Creating " + fileName, 2);
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		IResource resource = root.findMember(new Path(containerName));
		if (!resource.exists() || !(resource instanceof IContainer)) {
			throwCoreException("Container \"" + containerName + "\" does not exist.");
		}
		// Get the URI of the model file.
		URI fileURI = URI.createPlatformResourceURI(resource.getFullPath().toString().concat("/").concat(fileName), true);
			
		//Add the root to the object
		[c.element.name /] rootObject = [genPackage.prefix /]FactoryImpl.eINSTANCE.create[c.element.name /]();
[/let]
		//Set the Attributes
		[for (attr : EAttribute | c.element.eAllAttributes)]
		[if (attr.derived = false)]
		[if(c.Get_ClassRoleInstance_TypeFeature_EAttribute('name').name<>attr.name)]
			[if(attr.eType.name='EString' or attr.eType.name='String')]
		rootObject.set[attr.name.toUpperFirst() /](attr_[attr.name /]);
			[else]
		rootObject.set[attr.name.toUpperFirst() /]([Data_Type_Parse(attr)/](attr_[attr.name /]));		
			[/if]			
		[else]
		rootObject.set[attr.name.toUpperFirst() /](fileName.substring(0, fileName.lastIndexOf('.')));
		[/if]
		[/if]
		[/for]
		
		//Save XMI file
		XMI_File child_xmi = new XMI_File();
		child_xmi.Create_XMI_File(fileURI);//fileURI
		child_xmi.getFile_res().getContents().add(rootObject);
		child_xmi.Save_XMI();
		
		IContainer container = (IContainer) resource;
		final IFile file = container.getFile(new Path(fileName));
        
		//Search the file
		IContainer fol_parent = file.getParent();
		IFile file_parent = fol_parent.getFile(new Path(fol_parent.getName().concat(".xmi")));
		XMI_File file_xmi = new XMI_File(URI.createPlatformResourceURI(file_parent.getFullPath().toString(),true),child_xmi.getFile_reset());		
		
		((EList<EObject>)file_xmi.Get_Root().eGet(file_xmi.Get_Root().eClass().getEStructuralFeature("[ anPatternInstance.GetContainmentFileReferences(c).name /]"), true)).add(child_xmi.Get_Root());
		file_xmi.Save_XMI();
	
		monitor.worked(1);
		monitor.setTaskName("Opening file for editing...");
		getShell().getDisplay().asyncExec(new Runnable() {
			public void run() {
				IWorkbenchPage page =
					PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
				try {
					IDE.openEditor(page, file, true);
				} catch (PartInitException e) {
				}
			}
		});
		new EvaluateSiriusProjectCreation().executeFile(Platform.getExtensionRegistry(),fileURI);
		monitor.worked(1);
	}
	
	/**
	 * We will initialize file contents with a sample text.
	 */

	private void throwCoreException(String message) throws CoreException {
		IStatus status =
			new Status(IStatus.ERROR, "test_editor", IStatus.OK, message, null);
		throw new CoreException(status);
	}

	/**
	 * We will accept the selection in the workbench to see if
	 * we can initialize from it.
	 * @see IWorkbenchWizard#init(IWorkbench, IStructuredSelection)
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection) {
		this.selection = selection;
	}
}

[/file]

[/for]

[/template]
