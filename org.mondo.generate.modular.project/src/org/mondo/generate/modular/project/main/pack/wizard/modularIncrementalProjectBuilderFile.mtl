[comment encoding = UTF-8 /]
[module modularIncrementalProjectBuilderFile('http://www.eclipse.org/emf/2002/Ecore','http://mondo.org/runtimePatterns', 'http://www.eclipse.org/emf/2002/GenModel')]
[import org::mondo::generate::modular::project::main::requests::global_queriesModularProject /]

[template public generateModularIncrementalProjectBuilder(anProjectName : String, anPackageName : String,anPatternInstance : PatternInstance,c : ClassRoleInstance, anEObjectGenModel: GenModel)]
[file ('src/'.concat(anProjectName.toLower() + '.' + anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase() + getProperty('prefix_name')).replaceAll('\\.','/').concat('/wizard/').concat('ModularIncrementalProjectBuilder.java'),false, 'UTF-8')]
package [anProjectName.toLower()/].[anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase()/][getProperty('prefix_name')/].wizard;

import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IncrementalProjectBuilder;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.Platform;

public class ModularIncrementalProjectBuilder extends IncrementalProjectBuilder  {

	public static final String ID = "[anProjectName.toLower()/].[getProperty('prefix_name')/].[anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase()/].ModularIncrementalProjectBuilder";
	
	public ModularIncrementalProjectBuilder() {
		
	}

	@Override
	protected IProject['['/]] build(int kind, Map<String, String> args, IProgressMonitor monitor) throws CoreException {
		
		
		EvaluateModularBuilder eval = new EvaluateModularBuilder(kind, args, this, monitor);
		eval.execute(Platform.getExtensionRegistry());
		return null;
	}

}
[/file]

[/template]
