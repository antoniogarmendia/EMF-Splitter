[comment encoding = UTF-8 /]
[module executeEOLConstraintFile('http://www.eclipse.org/emf/2002/Ecore', 'http://mondo.org/runtimePatterns', 
		'http://www.eclipse.org/emf/2002/GenModel')]
[import org::mondo::generate::constraint::project::request::queries /]


[template public generateExecuteEOLConstraintFile(anProjectName : String, pathEcore : String, modularPatternInstance : PatternInstance, anEObjectGenModel : GenModel)]

[file ('src/'.concat(anProjectName.toLower() + '.' + getProperty('prefix_name')).replaceAll('\\.','/').concat('/builder/').concat('ExecuteEOLConstraint.java'),false, 'UTF-8')]
package [anProjectName/].[getProperty('prefix_name')/].builder;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Iterator;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.URIConverter;
import org.eclipse.emf.ecore.resource.impl.ExtensibleURIConverterImpl;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.epsilon.eol.types.EolSequence;
import org.miso.wind.turbine.cs.constraint.dialog.ConstraintMarkerManager;
import org.miso.wind.turbine.cs.constraint.dialog.ConstraintResourceMarker;
import org.uam.eps.modular.constraints.dialog.def.eol.EolStandAlone;
[comment Import the contains package/]
import [anProjectName/].[getProperty('prefix_name')/].contains.*;
import constraints.Constraint;
import constraints.ConstraintDefinition;
import constraints.MetamodelConstraint;
[for (c : ClassRoleInstance | Get_FolderClassRoleInstance(modularPatternInstance))]

[let genPackage : GenPackage =  getGenClassFromEClass(c.element,anEObjectGenModel).eContainer().oclAsType(GenPackage) ]
[if (genPackage.basePackage->isEmpty() = true)]
import [generateEClassImport(c.element)/];
[else]
import [genPackage.basePackage/].[generateEClassImportBasePackage(c.element)/];
[/if]
[/let]

[/for]

public class ExecuteEOLConstraint {
	
	private MetamodelConstraint mmconstraints;
	private java.net.URI metaModelUri;
	
	// EList of Constraints taking into account the Scope
	private EList<Constraint> globalQueries;
	private EList<Constraint> rootPackageQueries;
	private EList<Constraint> packageQueries;
	private EList<Constraint> unitQueries;
	
	public ExecuteEOLConstraint() {
		
		this.globalQueries = new BasicEList<Constraint>();
		this.rootPackageQueries = new BasicEList<Constraint>();
		this.packageQueries = new BasicEList<Constraint>();
		this.unitQueries = new BasicEList<Constraint>();
		obtainResourceOfConstraints();
		updateListOfConstraints();
		obtaintMetamodelUri();
	}
	
	private void obtainResourceOfConstraints() {
		
		URL locationClass = ExecuteEOLConstraint.class.getProtectionDomain().getCodeSource().getLocation();
		IPath classPath = new Path(locationClass.getPath());
		String projectName = classPath.lastSegment();
		URI consURI = URI.createPlatformPluginURI(projectName + "/constraints/[pathEcore.toString().substring(pathEcore.toString().lastIndex('/') + 1, pathEcore.toString().lastIndex('.'))/]cons",true);	
		ResourceSet reset = new ResourceSetImpl();
		Resource resConstraints = reset.getResource(consURI, true);
		EObject rootEObject = resConstraints.getContents().get(0);
		if (rootEObject instanceof MetamodelConstraint) {
			mmconstraints = ((MetamodelConstraint) rootEObject);
		}
	}
	
	private void obtaintMetamodelUri() {
		
		try {
			String projectMMString = ExecuteEOLConstraint.class.getProtectionDomain().getCodeSource().getLocation().toURI().toString();
			IPath pathMM = new Path(projectMMString);
			pathMM = pathMM.removeLastSegments(1).append("org.miso.wind.turbine.cs/WT_DesignPatterns.ecore");
			this.metaModelUri = java.net.URI.create(pathMM.toString());
			
		} catch (URISyntaxException e) {			
			e.printStackTrace();
		}
	}
	
	private void updateListOfConstraints() {
		
		Iterator<Constraint> itConstraints = mmconstraints.getConstraints().iterator();
		while (itConstraints.hasNext()) {
			Constraint constraint = (Constraint) itConstraints.next();
			switch (constraint.getDefinition()) {
			case GLOBAL:
				globalQueries.add(constraint);
				break;
			case SAME_ROOT_PACKAGE:
				rootPackageQueries.add(constraint);
				break;
			case SAME_PACKAGE:
				packageQueries.add(constraint);
				break;
			case UNIT:
				unitQueries.add(constraint);
				break;
			default:
				break;
			}
		}
	}
	
	public void executeQueries(EList<Constraint> queries, IResource resource) {
		
		Iterator<Constraint> itQueries = queries.iterator();
		while (itQueries.hasNext()) {
			Constraint constraint = (Constraint) itQueries.next();
			String eolModuleString = null;
			try {
				eolModuleString = (String) AllConstraint.class.getField(constraint.getName()).get(null);
			} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {				
				e.printStackTrace();
			}
			Object result = executeEOLExpression(eolModuleString, resource.getLocationURI());		
			if (constraint.getEClass() == null)
					markResourceWithoutContext(result, constraint, metaModelUri, resource);
					else
						markResourceWithContext(result, constraint.getName(), resource);
		}

		if (queries.size() > 0) {
			try {
				resource.refreshLocal(IResource.DEPTH_ZERO, null);
			} catch (CoreException e) {				
				e.printStackTrace();
			}
		}
	}

	public boolean executeQueries(Constraint constraint, IResource resource) {
		
		String eolModuleString = null;
		boolean anyError = false;
		try {
			eolModuleString = (String) AllConstraint.class.getField(constraint.getName()).get(null);
		} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {				
			e.printStackTrace();
		}
		Object result = executeEOLExpression(eolModuleString, resource.getLocationURI());
		if (constraint.getEClass() == null)
			anyError = markResourceWithoutContext(result, constraint, metaModelUri, resource);
			else
				anyError = markResourceWithContext(result, constraint.getName(), resource);	
		
		try {
			resource.refreshLocal(IResource.DEPTH_ZERO, null);
		} catch (CoreException e) {				
			e.printStackTrace();
		}	
		
		return anyError;
	}
	
	public void executeQueriesCheckContext(EList<Constraint> queries, IResource resource, boolean unit) {
		
		Iterator<Constraint> itQueries = queries.iterator();
		boolean executeEOL = false;
		while (itQueries.hasNext()) {
			Constraint constraint = (Constraint) itQueries.next();
			boolean execute = true;
			if (constraint.getEClass() != null) {				
				if (unit == true)
					execute = checkUnitContext(resource, constraint.getEClass());
				else
					execute = checkPackageContext(resource, constraint.getEClass());
			}
			if (execute == true) {
					executeEOL = true;
					String eolModuleString = null;
					try {
						eolModuleString = (String) AllConstraint.class.getField(constraint.getName()).get(null);
					} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {				
						e.printStackTrace();
					}
					Object result = executeEOLExpression(eolModuleString, resource.getLocationURI());
					if (constraint.getEClass() == null)
						markResourceWithoutContext(result, constraint, metaModelUri, resource);
					else
						markResourceWithContext(result, constraint.getName(), resource);
			}						
		}
	
		if (executeEOL == true) {
			try {
				resource.refreshLocal(IResource.DEPTH_ZERO, null);
			} catch (CoreException e) {				
				e.printStackTrace();
			}
		}		
	}

	public boolean executeQueriesCheckContext(Constraint constraint, IResource resource, boolean unit) {
		
		boolean execute = true;
		boolean anyError = false;
		if (constraint.getEClass() != null) {				
			if (unit == true)
				execute = checkUnitContext(resource, constraint.getEClass());
			else
				execute = checkPackageContext(resource, constraint.getEClass());
		}
		if (execute == true) {
			String eolModuleString = null;
			try {
				eolModuleString = (String) AllConstraint.class.getField(constraint.getName()).get(null);
			} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {				
				e.printStackTrace();
			}
			Object result = executeEOLExpression(eolModuleString, resource.getLocationURI());			
			if (constraint.getEClass() == null)
				anyError = markResourceWithoutContext(result, constraint, metaModelUri, resource);
			else
				anyError = markResourceWithContext(result, constraint.getName(), resource);
		}
		
		try {
			resource.refreshLocal(IResource.DEPTH_ZERO, null);
		} catch (CoreException e) {				
			e.printStackTrace();
		}
		
		return anyError;			
	}	
	
	public boolean checkUnitContext(IResource resource, EClass eClass) {
		
		String ext = resource.getFileExtension();
		[for (c : ClassRoleInstance | Get_FileClassRoleInstance(modularPatternInstance))]
			[if (Get_FileClassRoleInstance(modularPatternInstance)->size() = i and Get_FileClassRoleInstance(modularPatternInstance)->size() > 1)]
			else
			[/if]
			if (ext.equals("[c.Get_ClassRoleInstance_EAttribute('extension')/]")) {				
				if (eClass.getName().equals(Unit[c.element.name.toLowerCase().toUpperFirst()/].getRoot().getName()) == true)
					return true;
				else {
					return compareEClasses(Unit[c.element.name.toLowerCase().toUpperFirst()/].listOfContains, eClass.getName());			
				}
			} 
		[/for]	
		
		return false;
	}	

	public boolean checkUnitContext(Resource resource, EClass eClass) {
		
		String ext = resource.getURI().fileExtension();
		[for (c : ClassRoleInstance | Get_FileClassRoleInstance(modularPatternInstance))]
			[if (Get_FileClassRoleInstance(modularPatternInstance)->size() = i and Get_FileClassRoleInstance(modularPatternInstance)->size() > 1)]
			else
			[/if]
			if (ext.equals("[c.Get_ClassRoleInstance_EAttribute('extension')/]")) {				
				if (eClass.getName().equals(Unit[c.element.name.toLowerCase().toUpperFirst()/].getRoot().getName()) == true)
					return true;
				else {
					return compareEClasses(Unit[c.element.name.toLowerCase().toUpperFirst()/].listOfContains, eClass.getName());			
				}
			} 
		[/for]	
		
		return false;
	}	
	
	public boolean checkPackageContext(IResource resource, EClass eClass) {
		
		String extension = resource.getFullPath().getFileExtension();
		[for (c : ClassRoleInstance | Get_FolderClassRoleInstance(modularPatternInstance))] 
			[if (Get_FolderClassRoleInstance(modularPatternInstance)->size() = i and Get_FolderClassRoleInstance(modularPatternInstance)->size() > 1)]
			else
			[/if]
			if (extension.equals("[i/]")) {
				if (eClass.getName().equals(Package[c.element.name.toLowerCase().toUpperFirst()/].getRoot().getName()) == true)
					return true;
				else			
					return compareEClasses(Package[c.element.name.toLowerCase().toUpperFirst()/].listOfContains,eClass.getName());	
			}		
		[/for]
	
		return false;
	}
	
	public boolean checkPackageContext(Resource res, EClass eClass) {
		
		String extension = res.getURI().fileExtension();
		[for (c : ClassRoleInstance | Get_FolderClassRoleInstance(modularPatternInstance))] 
			[if (Get_FolderClassRoleInstance(modularPatternInstance)->size() = i and Get_FolderClassRoleInstance(modularPatternInstance)->size() > 1)]
			else
			[/if]
			if (extension.equals("[i/]")) {
				if (eClass.getName().equals(Package[c.element.name.toLowerCase().toUpperFirst()/].getRoot().getName()) == true)
					return true;
				else			
					return compareEClasses(Package[c.element.name.toLowerCase().toUpperFirst()/].listOfContains,eClass.getName());	
			}		
		[/for]
	
		return false;
	}
	

	public boolean compareEClasses(EList<EClass> listOfClasses, String eClassName) {
		
		Iterator<EClass> it = listOfClasses.iterator();
		while (it.hasNext()) {
			EClass currentEClass = (EClass) it.next();
			if (currentEClass.getName().equals(eClassName))
				return true;			
		}		
		return false;
	}
	
	private boolean markResourceWithContext(Object result, String constraintName, IResource resource) {
		
		if (result instanceof EolSequence<?>) {
			EolSequence<?> sequence = (EolSequence<?>) result;
			deleteMarker(resource,constraintName);
			if (sequence.size() == 0) 
				return true;
			else {
				Iterator<?> itContents = sequence.iterator();
				while (itContents.hasNext()) {
					Object tupleObject = (Object) itContents.next();
					if (tupleObject instanceof EolSequence<?>) {
						EolSequence<?> tuple = (EolSequence<?>) tupleObject;
						String uriObject = (String) tuple.get(0);
						String str = uriObject.substring(0, uriObject.lastIndexOf('#'));
						if (str.startsWith("file") == true) {
							str = fileUriToPlatform(uriObject);							
						}
						String platformFile = getPlatformFromFile(uriObject);
						String eObjectUri = uriObject.substring(uriObject.lastIndexOf('#'), uriObject.length());
						String errorMessage = (String) tuple.get(1);
						org.eclipse.emf.common.util.URI uri = org.eclipse.emf.common.util.URI.createURI(str);
						IResource iResource = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(uri.toPlatformString(true)));
						ConstraintResourceMarker resourceMarker = new ConstraintResourceMarker(iResource, eObjectUri, constraintName,errorMessage,platformFile);
						new ConstraintMarkerManager(resourceMarker).addErrorMarker();						
					}
				}				
				return false;
			}
		} 
		return false;
	}

	public String getPlatformFromFile(String uriEObject) { 
		
		String['['/]] uriArray = uriEObject.split("#");
		URI resourceURI = URI.createURI(uriArray['['/]0],true);
		
		//Convert File URI to platform URI
		URIConverter converter = new ExtensibleURIConverterImpl();
		URI fileUri = URI.createFileURI(ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString() + File.separator);
		URI platformURI = URI.createPlatformResourceURI("/", false);
		converter.getURIMap().put(fileUri, platformURI);
		URI anfileURI = converter.normalize(resourceURI);
		
		return anfileURI.toString();
	}
	
	private String fileUriToPlatform(String fileURI) {
		
		URIConverter converter = new ExtensibleURIConverterImpl();
		org.eclipse.emf.common.util.URI platformURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI("/", false);
		org.eclipse.emf.common.util.URI fileUri = org.eclipse.emf.common.util.URI.createFileURI(ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString() + File.separator);
		converter.getURIMap().put(fileUri, platformURI);
		org.eclipse.emf.common.util.URI afileURI = converter.normalize(org.eclipse.emf.common.util.URI.createURI(fileURI));
		return afileURI.toString();
	}
	
	private boolean markResourceWithoutContext(Object result, Constraint constraint, java.net.URI mmURI, IResource iResource) {
		
		if (result instanceof Boolean) {
			deleteMarker(iResource, constraint.getName());
			Boolean bResult = (Boolean) result;
			if (bResult == true)
				return true;
			else {
				File temp = createTempEolFile(constraint.getName() + "errorMessage" , constraint.getErrorMessage());
				EolStandAlone executeEolModule = new EolStandAlone(mmURI, temp.toURI(),iResource.getLocationURI());
				try {
					executeEolModule.execute();
				} catch (Exception e) {					
					e.printStackTrace();
				}
				ConstraintResourceMarker resourceMarker = new ConstraintResourceMarker(iResource, 
						null, constraint.getName(),executeEolModule.getResult().toString(),"");
				new ConstraintMarkerManager(resourceMarker).addErrorMarker();
				temp.delete();			
			}
		}
		return false;
	}
	
	private void deleteMarker(IResource iResource, String constraintName) {
		
		try {
			/*
			 * Delete just the resource markers of the specific type (ConstraintMarkerManager.FAILED_CONSTRAINT_MARKER_ID) 
			 **/
			IMarker['['/]] constraintMarkers = iResource.findMarkers(ConstraintMarkerManager.FAILED_CONSTRAINT_MARKER_ID, false, IResource.DEPTH_ONE);
			for (int i = 0; i < constraintMarkers.length; i++) {
				IMarker currentMarker = constraintMarkers['['/]i];
				String currentConstraintName = (String) currentMarker.getAttribute(ConstraintMarkerManager.CONSTRAINT_NAME);
				if (currentConstraintName.equals(constraintName))
					currentMarker.delete();
			}			
		} catch (CoreException e) {
			
			e.printStackTrace();
		}
		
	}

	public void executeGlobalQueries(IResource resource) {
		
		executeQueries(globalQueries, resource);	
	}
	
	public void executeRootPackageQueries(IResource resource) {
		
		executeQueriesCheckContext(rootPackageQueries, resource,false);
	}
	
	public void executePackageQueries(IResource resource) {
		
		executeQueriesCheckContext(packageQueries, resource,false);
	}
	
	public void executeUnitQueries(IResource resource) {
		
		executeQueriesCheckContext(unitQueries, resource,true);
	}
	
	public Object executeEOLExpression(String eolModule, java.net.URI modelUri) {
		
		EolStandAlone executeEolModule = new EolStandAlone(metaModelUri, eolModule,modelUri);
		try {
			executeEolModule.execute();
			return executeEolModule.getResult();
		} catch (Exception e) {			
			e.printStackTrace();
		}	
		return null;
	}
	
	private File createTempEolFile(String name, String statement) {
		
		File tempFile = null;
		try {
			tempFile = File.createTempFile(name, ".eol");
			BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile));
			bw.write("return " + statement);
			bw.close();				
			
		} catch (IOException e) {			
			e.printStackTrace();
		}	
		return tempFile;
	}

	public EList<Constraint> getConstraints(Resource res, ConstraintDefinition def) {
		
		EList<Constraint> listOfConstraints = new BasicEList<Constraint>();
		Iterator<Constraint> itConstraints = null;
		switch (def) {
		case GLOBAL:
			listOfConstraints.addAll(globalQueries);
			return listOfConstraints;
		case SAME_ROOT_PACKAGE:
			EList<Constraint> list = new BasicEList<Constraint>();
			list.addAll(rootPackageQueries);
			list.addAll(packageQueries);
			itConstraints = list.iterator();
			break;
				
		case SAME_PACKAGE:
			itConstraints = packageQueries.iterator();			
			break;			
		case UNIT:
			itConstraints = unitQueries.iterator();
			break;			
		default:
			break;
		}
				
		while (itConstraints.hasNext()) {
			
			Constraint constraint = (Constraint) itConstraints.next();			
			if (constraint.getDefinition().equals(ConstraintDefinition.UNIT)) {
				if (constraint.getEClass() != null) { 
				    boolean checkConstraint = checkUnitContext(res, constraint.getEClass());
				    if (checkConstraint)
				    	listOfConstraints.add(constraint);
				} else {
					listOfConstraints.add(constraint);
				}
			} else if (constraint.getDefinition().equals(ConstraintDefinition.SAME_PACKAGE) || def.equals(ConstraintDefinition.SAME_ROOT_PACKAGE)) {
				if (constraint.getEClass() != null) {
					boolean checkConstraint = checkPackageContext(res, constraint.getEClass());
					if (checkConstraint)
				    	listOfConstraints.add(constraint);
				} else {
					listOfConstraints.add(constraint);
				}
			}
		}
		
		return listOfConstraints;
	}

	public EList<Constraint> getGlobalQueries() {
		return globalQueries;
	}
	
	public EList<Constraint> getRootPackageQueries() {
		return rootPackageQueries;
	}

	public EList<Constraint> getPackageQueries() {
		return packageQueries;
	}

	public EList<Constraint> getUnitQueries() {
		return unitQueries;
	}
	
}

[/file]
[/template]
